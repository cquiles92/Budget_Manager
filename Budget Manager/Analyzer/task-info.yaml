type: edu
custom_name: stage5
files:
- name: src/budget/Main.java
  visible: true
  text: |
    package budget;

    public class Main {
        public static void main(String[] args) {
            // write your code here
        }
    }
  learner_created: false
- name: test/BudgetManagerTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.io.File;
    import java.util.List;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    public class BudgetManagerTest extends StageTest<String> {


        @Override
        public List<TestCase<String>> generate() {
            return List.of(

                    new TestCase<String>()
                            .setInput("0\n")
                            .setCheckFunc(BudgetManagerTest::test1),

                    new TestCase<String>()
                            .setInput("0\n")
                            .setCheckFunc(BudgetManagerTest::test2),

                    new TestCase<String>()
                            .setInput("4\n0")
                            .setCheckFunc(BudgetManagerTest::test3),

                    new TestCase<String>()
                            .setInput("1\n400\n4\n1\n200\n4\n0")
                            .setCheckFunc(BudgetManagerTest::test4),

                    new TestCase<String>()
                            .setInput("1\n1000\n2\n" +
                                    "1\nAlmond 250g\n35.43\n" +
                                    "1\nMilk\n3.50\n" +
                                    "1\nRed Fuji Apple\n5.99\n" +
                                    "1\nEggs\n3.99\n" +
                                    "1\nFIJI Natural Artesian Water\n25.98\n" +
                                    "1\nHershey's milk chocolate bars\n8.54\n" +
                                    "1\nGreat Value Broccoli Florets\n1.00\n" +
                                    "1\nKeystone Ground Bee\n6.28\n" +
                                    "2\nGildan LT\n8.61\n" +
                                    "2\nMen's Dual Defense Crew Socks 12 Pairs\n13.00\n" +
                                    "2\nWrangler Men's Stretch Cargo Pant\n19.97\n" +
                                    "3\nLEGO DUPLO Town Farm Animals\n10.10\n" +
                                    "3\nCinema\n8.73\n" +
                                    "3\nSkate rental\n30\n" +
                                    "4\nSensodyne Pronamel Toothpaste\n19.74\n" +
                                    "4\nChick-fil-A $10 Gift Card\n10\n" +
                                    "4\nDebt\n3.50\n" +
                                    "5\n5\n0")
                            .setCheckFunc(BudgetManagerTest::test5),

                    new TestCase<String>()
                            .setInput("6\n4\n3\n5\n1\n6\n0")
                            .setCheckFunc(BudgetManagerTest::test6),

                    new TestCase<String>()
                            .setInput("7\n1\n2\n3\n4\n4\n6\n7\n1\n2\n3\n1\n4\n0")
                            .setCheckFunc(BudgetManagerTest::test7)
            );
        }


        //Checking program stop
        private static CheckResult test1(String reply, String attach) {
            if (!reply.contains("Bye!")) {
                return new CheckResult(false,
                        "Your program should stop after choosing \"Exit\"");
            }
            return new CheckResult(true);
        }


        //Checking menu
        private static CheckResult test2(String reply, String attach) {
            String[] menuPatterns = {"1)", "2)", "3)", "4)", "0)"};
            for (String menuPattern : menuPatterns) {
                if (!reply.contains(menuPattern)) {
                    return new CheckResult(false,
                            "Your menu doesn't have item " + menuPattern);
                }
            }
            return new CheckResult(true);
        }


        //Checking balance
        private static CheckResult test3(String reply, String attach) {

            String[] blocks = reply.split("\n(\n+)?\n");

            if (blocks.length != 4) {
                return new CheckResult(false,
                        "Your program shows wrong blocks of output. Expected: 4\n" +
                                "You have: " + blocks.length + "\n" +
                                "Make sure that you print an empty line after each chosen action");
            }

            String balance = blocks[1];

            if (!balance.toLowerCase().contains("balance")) {
                return new CheckResult(false,
                        "Your program should show balance after choosing 4th item");
            }

            Pattern doublePattern = Pattern.compile("\\d+[,.]\\d+");
            Matcher matcher = doublePattern.matcher(balance);

            if (!matcher.find()) {
                return new CheckResult(false,
                        "Your balance should contain a number!");
            }

            double balanceDouble = Double.parseDouble(matcher.group());

            if (Math.abs(balanceDouble - 0) > 0.0001) {
                System.out.println(balance);
                return new CheckResult(false,
                        "Balance should be $0.00 at the beginning");
            }

            return new CheckResult(true);
        }


        //Checking adding income
        private static CheckResult test4(String reply, String attach) {

            String[] blocks = reply.split("\n(\n+)?\n");

            if (blocks.length != 10) {
                return new CheckResult(false,
                        "Your program shows wrong blocks of output. Expected: 10\n" +
                                "You have: " + blocks.length + "\n" +
                                "Make sure that you print an empty line after each chosen action");
            }

            String balanceAfterFirstAddingIncome = blocks[3];

            if (!balanceAfterFirstAddingIncome.contains("$400")) {
                return new CheckResult(false,
                        "Balance is wrong after adding income!.\n" +
                                "Expected:\n" +
                                "Balance: $400.00\n" +
                                "Your output:\n" +
                                balanceAfterFirstAddingIncome);
            }

            return new CheckResult(true);
        }

        //Checking the saving purchases
        private static CheckResult test5(String reply, String attach) {
            File file = new File("purchases.txt");
            if (!file.exists()) {
                return new CheckResult(false,
                        "Your program should create purchase.txt file and save purchases there!");
            }
            return new CheckResult(true);
        }

        //Checking the downloading purchases
        private static CheckResult test6(String reply, String attach) {

            String[] blocks = reply.split("\n(\n+)?\n");

            if (blocks.length != 12) {
                return new CheckResult(false,
                        "Your program shows wrong blocks of output. Expected: 12\n" +
                                "You have: " + blocks.length + "\n" +
                                "Make sure that you print an empty line after each chosen action");
            }

            String balanceAfterDownloadingPurchases = blocks[3];

            if (!balanceAfterDownloadingPurchases.replace(",", ".").contains("785.64")) {
                return new CheckResult(false,
                        "Your program reads balance from file wrong!");
            }

            //All purchases list

            String allPurchases = blocks[6];

            String[] expectedPurchases = {
                    "Almond 250g $35.43",
                    "Milk $3.50",
                    "Red Fuji Apple $5.99",
                    "Eggs $3.99",
                    "FIJI Natural Artesian Water $25.98",
                    "Hershey's milk chocolate bars $8.54",
                    "Great Value Broccoli Florets $1.00",
                    "Keystone Ground Bee $6.28",
                    "Gildan LT $8.61",
                    "Men's Dual Defense Crew Socks 12 Pairs $13.00",
                    "Wrangler Men's Stretch Cargo Pant $19.97",
                    "LEGO DUPLO Town Farm Animals $10.10",
                    "Cinema $8.73",
                    "Skate rental $30.00",
                    "Sensodyne Pronamel Toothpaste $19.74",
                    "Chick-fil-A $10 Gift Card $10.00",
                    "Debt $3.50"
            };

            for (String expectedPurchase : expectedPurchases) {
                if (!allPurchases.contains(expectedPurchase)) {
                    return new CheckResult(false,
                            "Your all purchases list doesn't have purchase:\n" +
                                    expectedPurchase + "\n" +
                                    "But should have!");
                }
            }

            String[] temp = allPurchases.split("\n");
            String totalSum = temp[temp.length - 1];

            Pattern doublePattern = Pattern.compile("\\d+[,.]\\d+");
            Matcher matcher = doublePattern.matcher(totalSum);

            if (!matcher.find()) {
                return new CheckResult(false,
                        "Total sum of all purchases is wrong. Expected:\n" +
                                "Total sum: $214.36\n" +
                                "Your output:\n" +
                                totalSum);
            }

            double allTotalSum = Double.parseDouble(matcher.group());

            if (Math.abs(allTotalSum - 214.36) > 0.0001) {
                return new CheckResult(false,
                        "Your all total sum is wrong!");
            }

            //Food list

            String foodList = blocks[8];

            expectedPurchases = new String[]{
                    "Almond 250g $35.43",
                    "Milk $3.50",
                    "Red Fuji Apple $5.99",
                    "Eggs $3.99",
                    "FIJI Natural Artesian Water $25.98",
                    "Hershey's milk chocolate bars $8.54",
                    "Great Value Broccoli Florets $1.00",
                    "Keystone Ground Bee $6.28"
            };

            for (String expectedPurchase : expectedPurchases) {
                if (!foodList.contains(expectedPurchase)) {
                    return new CheckResult(false,
                            "Your food list doesn't have purchase:\n" +
                                    expectedPurchase + "\n" +
                                    "But should have!");
                }
            }

            temp = foodList.split("\n");
            totalSum = temp[temp.length - 1];

            matcher = doublePattern.matcher(totalSum);

            if (!matcher.find()) {
                return new CheckResult(false,
                        "Total sum of food list is wrong. Expected:\n" +
                                "Total sum: $90.71\n" +
                                "Your output:\n" + totalSum);
            }

            double foodTotalSum = Double.parseDouble(matcher.group());

            if (Math.abs(foodTotalSum - 90.71) > 0.0001) {
                return new CheckResult(false,
                        "Your food total sum is wrong!");
            }

            return new CheckResult(true);
        }


        //Sorting check
        private static CheckResult test7(String reply, String attach) {

            String[] blocks = reply.split("\n(\n+)?\n");

            if (blocks.length != 22) {
                return new CheckResult(false,
                        "Your program shows wrong blocks of output. Expected: 22\n" +
                                "You have: " + blocks.length + "\n" +
                                "Make sure that you print an empty line after each chosen action");
            }

            String sortEmptyAllPurchases = blocks[2];

            if (!sortEmptyAllPurchases.contains("list is empty")) {
                return new CheckResult(false,
                        "\"Sort all purchases\" item shouldn't work if there are no purchases in the list.\n" +
                                "You should print 'List is empty!'");
            }

            String sortByEmptyType = blocks[4];

            if (sortByEmptyType.contains("list is empty")) {
                return new CheckResult(false,
                        "\"Sort by type\" item should work even if there are no purchases in the list\n" +
                                "You should print each category with total sum $0\n" +
                                "Your output shouldn't contain 'List is empty!'");
            }

            String sortEmptyCertainType = blocks[7];

            if (!sortEmptyCertainType.contains("list is empty")) {
                return new CheckResult(false,
                        "\"Sort certain type\" item shouldn't work if there are no purchases in the certain list\n" +
                                "You should print 'List is empty'");
            }

            String allSorted = blocks[13];
            String rightSorted = "Almond 250g $35.43\n" +
                    "Skate rental $30.00\n" +
                    "FIJI Natural Artesian Water $25.98\n" +
                    "Wrangler Men's Stretch Cargo Pant $19.97\n" +
                    "Sensodyne Pronamel Toothpaste $19.74\n" +
                    "Men's Dual Defense Crew Socks 12 Pairs $13.00\n" +
                    "LEGO DUPLO Town Farm Animals $10.10\n" +
                    "Chick-fil-A $10 Gift Card $10.00\n" +
                    "Cinema $8.73\n" +
                    "Gildan LT $8.61\n" +
                    "Hershey's milk chocolate bars $8.54\n" +
                    "Keystone Ground Bee $6.28\n" +
                    "Red Fuji Apple $5.99\n" +
                    "Eggs $3.99\n" +
                    "Milk $3.50\n" +
                    "Debt $3.50\n" +
                    "Great Value Broccoli Florets $1.00";

            if (!allSorted.contains(rightSorted)) {
                return new CheckResult(false,
                        "Your program sort all purchases wrong!\n" +
                                "Expected:\n" +
                                rightSorted + "\n" +
                                "Your output:\n" +
                                allSorted);
            }


            String sortedByType = blocks[15];
            String rightSortedByType = "Food - $90.71\n" +
                    "Entertainment - $48.83\n" +
                    "Clothes - $41.58\n" +
                    "Other - $33.24";

            if (!sortedByType.contains(rightSortedByType)) {
                return new CheckResult(false,
                        "Your program sort by type wrong!\n" +
                                "Expected:\n" +
                                rightSortedByType + "\n" +
                                "Your output:\n" +
                                sortedByType);
            }

            String sortedCertainType = blocks[18];
            String rightSortedCertainType = "Almond 250g $35.43\n" +
                    "FIJI Natural Artesian Water $25.98\n" +
                    "Hershey's milk chocolate bars $8.54\n" +
                    "Keystone Ground Bee $6.28\n" +
                    "Red Fuji Apple $5.99\n" +
                    "Eggs $3.99\n" +
                    "Milk $3.50\n" +
                    "Great Value Broccoli Florets $1.00";

            if (!sortedCertainType.contains(rightSortedCertainType)) {
                return new CheckResult(false,
                        "Your program sort certain type wrong!\n" +
                                "Expected:\n" +
                                rightSortedCertainType + "\n" +
                                "Your output:\n" +
                                sortedCertainType);
            }

            return new CheckResult(true);
        }
    }
  learner_created: false
- name: src/budget/BudgetManager.java
  visible: true
  text: |
    package budget;


    import java.io.*;
    import java.util.ArrayList;
    import java.util.List;
    import java.util.Scanner;
    import java.util.stream.Collectors;

    public class BudgetManager {
        double totalIncome;
        boolean endProgram;
        List<Expense> expenses;
        String filename;
        Scanner scanner;

        public BudgetManager() {
            totalIncome = 0;
            endProgram = false;
            expenses = new ArrayList<>();
            filename = "purchases.txt";
            scanner = new Scanner(System.in);
        }

        public void start() {
            while (!endProgram) {
                printMenu();
                methodSelect();
            }
        }

        private void printMenu() {
            System.out.println("Choose your action:\n" +
                               "1) Add income\n" +
                               "2) Add purchase\n" +
                               "3) Show list of purchases\n" +
                               "4) Balance\n" +
                               "5) Save\n" +
                               "6) Load\n" +
                               "0) Exit\n");
        }

        private void purchaseMenu() {
            System.out.println("Choose the type of purchase\n" +
                               "1) Food\n" +
                               "2) Clothes\n" +
                               "3) Entertainment\n" +
                               "4) Other\n" +
                               "5) Back\n");
        }

        private void listMenu() {
            System.out.println("Choose the type of purchases\n" +
                               "1) Food\n" +
                               "2) Clothes\n" +
                               "3) Entertainment\n" +
                               "4) Other\n" +
                               "5) All\n" +
                               "6) Back\n");
        }

        private void methodSelect() {
            String input = scanner.nextLine().trim();

            switch (input) {
                case "1":
                    addIncome();
                    break;
                case "2":
                    addPurchase();
                    break;
                case "3":
                    printReceipt();
                    break;
                case "4":
                    showBalance();
                    break;
                case "5":
                    saveToSaveFile();
                    break;
                case "6":
                    loadFromSaveFile();
                    break;
                case "0":
                    setEndProgram();
                    break;
                default:
                    System.out.println("Invalid input\n");
            }
        }

        private void addIncome() {
            System.out.println("Enter income:");
            String input = scanner.nextLine().trim();
            try {
                totalIncome += Double.parseDouble(input);
                System.out.println("Income was added!\n");
            } catch (NumberFormatException e) {
                System.out.println("Invalid input\n");
            }
        }

        private void addPurchase() {
            String nameOfExpense;
            double priceOfExpense;
            ExpenseType expenseType;

            while (true) {
                purchaseMenu();

                String expenseSelection = scanner.nextLine();
                switch (expenseSelection) {
                    case "1":
                        expenseType = ExpenseType.FOOD;
                        break;
                    case "2":
                        expenseType = ExpenseType.CLOTHES;
                        break;
                    case "3":
                        expenseType = ExpenseType.ENTERTAINMENT;
                        break;
                    case "4":
                        expenseType = ExpenseType.OTHER;
                        break;
                    case "5":
                        return;
                    default:
                        System.out.println("Invalid input\n");
                        return;
                }

                System.out.println("Enter purchase name:");
                nameOfExpense = scanner.nextLine();
                System.out.println("Enter its price:");
                String input = scanner.nextLine();

                try {
                    priceOfExpense = Double.parseDouble(input);
                    if (priceOfExpense <= totalIncome) {
                        totalIncome -= priceOfExpense;
                        Expense expense = new Expense(nameOfExpense, priceOfExpense, expenseType);
                        expenses.add(expense);

                        System.out.println("Purchase was added!\n");
                    } else {
                        System.out.println("Not enough funds to purchase\n");
                    }
                } catch (NumberFormatException e) {
                    System.out.println("Invalid input\n");
                }
            }
        }

        private double calculate(List<Expense> expenseList) {
            return expenseList.stream().mapToDouble(Expense::getValue).sum();
        }

        private void printReceipt() {
            if (expenses.isEmpty()) {
                System.out.println("The purchase list is empty!\n");
            } else {
                while (true) {
                    listMenu();
                    ExpenseType currentExpenses = null;
                    String input = scanner.nextLine().trim();
                    switch (input) {
                        case "1":
                            currentExpenses = ExpenseType.FOOD;
                            break;
                        case "2":
                            currentExpenses = ExpenseType.CLOTHES;
                            break;
                        case "3":
                            currentExpenses = ExpenseType.ENTERTAINMENT;
                            break;
                        case "4":
                            currentExpenses = ExpenseType.OTHER;
                            break;
                        case "5":
                            break;
                        case "6":
                            return;
                        default:
                            //quit menu
                            System.out.println("Invalid input\n");
                            return;
                    }
                    if (currentExpenses == null) {
                        // full list
                        System.out.println("All:");
                        expenses.forEach(System.out::println);
                        System.out.printf("Total sum: $%.2f\n\n", calculate(expenses));
                    } else {
                        //create sublist based off enum
                        ExpenseType finalCurrentExpenses = currentExpenses;
                        List<Expense> subList = expenses.stream().filter(expense -> expense.getExpenseType() == finalCurrentExpenses).collect(Collectors.toList());

                        if (subList.isEmpty()) {
                            System.out.println("The purchase list is empty!\n");
                        } else {
                            subList.forEach(System.out::println);
                            System.out.printf("Total sum: $%.2f\n\n", calculate(subList));
                        }
                    }
                }
            }
        }

        private void showBalance() {
            System.out.printf("Balance: $%.2f\n\n", totalIncome);
        }

        private void saveToSaveFile() {
            try (BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(filename))) {
                bufferedWriter.write(totalIncome + "\n");
                for (Expense expense : expenses) {
                    String expenseToString = expense.getName() + "\t" + expense.getValue() + "\t" + expense.getExpenseType().name() + "\n";
                    bufferedWriter.write(expenseToString);
                }
                System.out.println("Purchases were saved!\n");
            } catch (IOException e) {
                System.out.println("IO EXCEPTION");
            }

        }

        private void loadFromSaveFile() {
            try (BufferedReader bufferedReader = new BufferedReader(new FileReader("purchases.txt"))) {
                totalIncome = Double.parseDouble(bufferedReader.readLine());
                String bufferedLine;
                while ((bufferedLine = bufferedReader.readLine()) != null) {
                    String[] expenseData = bufferedLine.split("\t");

                    String expenseName = expenseData[0];
                    double expenseValue = Double.parseDouble(expenseData[1]);
                    ExpenseType expenseType = ExpenseType.valueOf(expenseData[2]);

                    Expense currentExpense = new Expense(expenseName, expenseValue, expenseType);
                    expenses.add(currentExpense);
                }
                System.out.println("Purchases were loaded!\n");
            } catch (IOException e) {
                System.out.println("FILE NOT FOUND");
            }
        }

        private void setEndProgram() {
            System.out.println("\nBye!");
            endProgram = true;
        }
    }
  learner_created: true
- name: purchases.txt
  visible: true
  text: "785.64\nAlmond 250g\t35.43\tFOOD\nMilk\t3.5\tFOOD\nRed Fuji Apple\t5.99\t\
    FOOD\nEggs\t3.99\tFOOD\nFIJI Natural Artesian Water\t25.98\tFOOD\nHershey's milk\
    \ chocolate bars\t8.54\tFOOD\nGreat Value Broccoli Florets\t1.0\tFOOD\nKeystone\
    \ Ground Bee\t6.28\tFOOD\nGildan LT\t8.61\tCLOTHES\nMen's Dual Defense Crew Socks\
    \ 12 Pairs\t13.0\tCLOTHES\nWrangler Men's Stretch Cargo Pant\t19.97\tCLOTHES\n\
    LEGO DUPLO Town Farm Animals\t10.1\tENTERTAINMENT\nCinema\t8.73\tENTERTAINMENT\n\
    Skate rental\t30.0\tENTERTAINMENT\nSensodyne Pronamel Toothpaste\t19.74\tOTHER\n\
    Chick-fil-A $10 Gift Card\t10.0\tOTHER\nDebt\t3.5\tOTHER\n"
  learner_created: true
- name: src/budget/Expense.java
  visible: true
  text: |
    package budget;

    enum ExpenseType {
        FOOD, CLOTHES, ENTERTAINMENT, OTHER;

        @Override
        public String toString() {
            return name().charAt(0) + name().substring(1).toLowerCase();
        }
    }

    public class Expense {
        private final String name;
        private final double value;
        private final ExpenseType expenseType;

        public Expense(String name, double value, ExpenseType expenseType) {
            this.name = name;
            this.value = value;
            this.expenseType = expenseType;
        }

        public String getName() {
            return name;
        }

        public double getValue() {
            return value;
        }

        public ExpenseType getExpenseType() {
            return expenseType;
        }

        @Override
        public String toString() {
            return String.format(name + " $%.2f", value);
        }

    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/7028#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: Sat, 14 May 2022 22:52:59 UTC
record: -1
